name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential mingw-w64 unzip
          sudo apt-get install -y libx11-dev libxcursor-dev libxi-dev \
            libxxf86vm-dev libgl1-mesa-dev libglu1-mesa-dev \
            libasound2-dev libopenal-dev libpng-dev zlib1g-dev \
            libxrandr-dev libxinerama-dev
            
      - name: Download and install Raylib for Linux
        run: |
          git clone https://github.com/raysan5/raylib.git raylib-linux
          cd raylib-linux
          
          # Obtém a última versão estável
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          git checkout $LATEST_TAG
          
          mkdir build && cd build
          cmake -DBUILD_SHARED_LIBS=ON ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../..
          
      - name: Build for Linux
        run: |
          export C_INCLUDE_PATH=/usr/local/include
          export LIBRARY_PATH=/usr/local/lib
          gcc -o aniversario aniversario.c -lraylib -lm -lpthread -ldl
          
      - name: Build for Windows using MinGW
        run: |
          RAYLIB_DIR=$(pwd)/raylib/raylib-*
          x86_64-w64-mingw32-gcc -o aniversario.exe aniversario.c -I${RAYLIB_DIR}/include -L${RAYLIB_DIR}/lib -lraylib -lopengl32 -lgdi32 -lwinmm

      - name: Create and push tag with semantic versioning
        run: |
          # Obter a última tag ou definir v0.0.0 como padrão
          LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          NEW_TAG=$(echo $LAST_TAG | awk -F. '{$NF++; print $1"."$2"."$NF}')
          TAG_NAME="$NEW_TAG"

          # Ler o conteúdo do arquivo release-notes.md
          if [ -f release-notes.md ]; then
            TAG_MESSAGE=$(cat release-notes.md)
          else
            TAG_MESSAGE="Atualização automática (sem release-notes.md)"
          fi

          # Criar a tag com a mensagem
          git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"

          # Fazer push da tag para o repositório
          git push origin "$TAG_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}