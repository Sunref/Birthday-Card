name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential mingw-w64 unzip \
            libx11-dev libxcursor-dev libxi-dev \
            libxxf86vm-dev libgl1-mesa-dev libglu1-mesa-dev \
            libasound2-dev libopenal-dev libpng-dev zlib1g-dev \
            libxrandr-dev libxinerama-dev \
            mesa-common-dev libglfw3-dev pkg-config

      - name: Download and install Raylib for Linux
        run: |
          git clone https://github.com/raysan5/raylib.git raylib-linux
          cd raylib-linux
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          git checkout $LATEST_TAG
          mkdir build && cd build
          cmake -DBUILD_SHARED_LIBS=OFF ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
          cd ../..

      - name: Download latest Raylib for MinGW
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/raysan5/raylib/releases/latest | grep "browser_download_url.*win64_mingw-w64.zip" | cut -d '"' -f 4)
          curl -L -o raylib.zip $LATEST_RELEASE
          unzip raylib.zip -d raylib

      - name: Build for Linux
        run: |
          cd MessageCard
          export C_INCLUDE_PATH=/usr/local/include
          export LIBRARY_PATH=/usr/local/lib
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
          make clean
          # Debug libraries first
          make debug-libs || true
          # Try different build approaches
          make release PLATFORM=LINUX || make PLATFORM=LINUX || make debug PLATFORM=LINUX
        env:
          C_INCLUDE_PATH: /usr/local/include
          LIBRARY_PATH: /usr/local/lib

      - name: Build for Windows using MinGW
        run: |
          cd MessageCard
          RAYLIB_DIR=$(find $(pwd)/../raylib -maxdepth 1 -type d -name "raylib-*" | head -n 1)
          echo "Usando Raylib em: $RAYLIB_DIR"
          
          # Compile all source files for Windows
          x86_64-w64-mingw32-gcc -c src/main.c -o build/main_win.o -Iinclude -I${RAYLIB_DIR}/include
          x86_64-w64-mingw32-gcc -c src/animation.c -o build/animation_win.o -Iinclude -I${RAYLIB_DIR}/include
          x86_64-w64-mingw32-gcc -c src/balloon.c -o build/balloon_win.o -Iinclude -I${RAYLIB_DIR}/include
          x86_64-w64-mingw32-gcc -c src/star.c -o build/star_win.o -Iinclude -I${RAYLIB_DIR}/include
          x86_64-w64-mingw32-gcc -c src/messageInterface.c -o build/messageInterface_win.o -Iinclude -I${RAYLIB_DIR}/include
          x86_64-w64-mingw32-gcc -c src/messageLoader.c -o build/messageLoader_win.o -Iinclude -I${RAYLIB_DIR}/include
          
          # Link all objects into final executable
          x86_64-w64-mingw32-gcc -o bin/birthday_animation.exe build/*_win.o -L${RAYLIB_DIR}/lib -lraylib -lopengl32 -lgdi32 -lwinmm

      - name: Copy executables to release folder
        run: |
          mkdir -p releases
          cp MessageCard/bin/message_animation releases/message_animation-linux
          cp MessageCard/bin/message_animation.exe releases/message_animation.exe
          # Set executable permissions
          chmod +x releases/birthday_animation-linux
          chmod +x releases/birthday_animation.exe

      - name: Configure Git user for tagging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push tag with semantic versioning
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          
          # Check if we're starting from v0.x.x versions, if so, jump to v1.0.0
          if [[ $LAST_TAG == v0.* ]]; then
            TAG_NAME="v1.0.0"
          else
            # Normal semantic versioning for v1.x.x and above
            NEW_TAG=$(echo $LAST_TAG | awk -F. '{$NF++; print $1"."$2"."$NF}')
            TAG_NAME="$NEW_TAG"
          fi

          if [ -f release-notes.md ]; then
            TAG_MESSAGE=$(cat release-notes.md)
          else
            TAG_MESSAGE="Atualização automática (sem release-notes.md)"
          fi

          git tag -a "$TAG_NAME" -m "$TAG_MESSAGE"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin "$TAG_NAME"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          
          if [ -f release-notes.md ]; then
            RELEASE_BODY=$(cat release-notes.md)
          else
            RELEASE_BODY="Automated release for version $LAST_TAG"
          fi
          
          # Create the release with the tag
          gh release create $LAST_TAG \
            --title "Birthday Card Release $LAST_TAG" \
            --notes "$RELEASE_BODY" \
            ./releases/birthday_animation-linux \
            ./releases/birthday_animation.exe

      - name: Clear release notes for next version
        run: |
          if [ -f release-notes.md ]; then
            # Create a backup of the old release notes with the version tag
            LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            cp release-notes.md "release-notes-$LAST_TAG.md"
            
            # Clear the release-notes.md file
            echo "# Release Notes" > release-notes.md
            echo "<!-- Add release notes for the next version here -->" >> release-notes.md
            
            # Commit the changes
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add release-notes.md "release-notes-$LAST_TAG.md"
            git commit -m "Clear release notes for next version"
            git push origin ${GITHUB_REF#refs/heads/}
          fi